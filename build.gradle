plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.1.5'
  id 'org.owasp.dependencycheck' version '12.0.0'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'io.freefair.lombok' version '8.11'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('integrationTest', Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
}

check.dependsOn(integrationTest)

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

jacocoTestReport {
  executionData(integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}




// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.24.3'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.24.3'

  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '7.9'
  implementation group: 'org.mapdb', name: 'mapdb', version: '3.1.0'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.2'

  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '4.2.0'
}

mainClassName = 'uk.gov.hmcts.reform.rse.idam.simulator.Application'

bootJar {
  getArchiveFileName().set(provider {
    'rse-idam-simulator.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
